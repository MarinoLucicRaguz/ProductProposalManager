@page "/products"
@inject NavigationManager Navigation
@inject AuthenticationService AuthenticationService
@inject IHttpClientFactory HttpClientFactory


<div class="products-container">
    <h3>Proizvodi</h3>

    @if (_products == null)
    {
        <p>@ErrorMessage</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Ime proizvoda</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _products)
                {
                    <tr>
                        <td>@product.ProductName</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private IEnumerable<Product> _products;
    private string ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.isUserAuthenticated())
        {
            Navigation.NavigateTo("/login");
        }

        try
        {
            var client = HttpClientFactory.CreateClient("api");

            var response = await client.GetAsync($"api/Product/");

            if (response.IsSuccessStatusCode)
            {
                var products = await response.Content.ReadFromJsonAsync<IEnumerable<Product>>();
                if (products != null)
                {
                    _products = products;
                }
            }
            else
            {
                ErrorMessage = "Nema proizvoda za predlaganje";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Doslo je do greske: {ex.Message}";
        }
       
    }
}
