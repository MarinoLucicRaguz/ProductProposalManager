@page "/create-proposal"
@inject NavigationManager Navigation
@inject AuthenticationService AuthenticationService
@inject IHttpClientFactory HttpClientFactory

<div class="create-proposal-container">
    <h3>Napravi prijedlog</h3>
    @if (Products != null && Products.Any())
    {
        <div class="form">
            <div class="form-group">
                <label for="product">Proizvod</label>
                <select @bind="NewProposal.ProductId" class="form-control" id="product">
                    @foreach (var product in Products)
                    {
                        <option value="@product.Id">@product.ProductName</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="description">Opis prijedloga</label>
                <textarea @bind="NewProposal.ProposalText" class="form-control" id="description"></textarea>
            </div>

            <button class="btn-create" @onclick="HandleCreateProposal">Dodaj prijedlog</button>
        </div>
    }
    else
    {
        <div class="infoMessage">
            @InfoMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="errorMessage">@ErrorMessage</div>
    }
</div>

@code {
    private Proposal NewProposal = new Proposal();
    private IEnumerable<Product> Products;
    private string ErrorMessage { get; set; }
    private string InfoMessage { get; set; }

    private HttpClient _client;
    private int? _userId;
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.isUserAuthenticated())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        _client = HttpClientFactory.CreateClient("api");
        _userId = await AuthenticationService.GetCurrentUserId();

        if (_userId == null)
        {
            ErrorMessage = "Korisnik nije pronaden.";
            return;
        }

        var userResponse = await _client.GetAsync($"api/User/{_userId}");
        if (userResponse.IsSuccessStatusCode)
        {
            _user = await userResponse.Content.ReadFromJsonAsync<User>();
        }

        await InitializeData();
    }

    private async Task InitializeData()
    {
        try
        {
            var userProposalsResponse = await _client.GetAsync($"api/Proposal/user/{_userId}");
            if (userProposalsResponse.IsSuccessStatusCode)
            {
                var userProposals = await userProposalsResponse.Content.ReadFromJsonAsync<List<Proposal>>();
                var productsResponse = await _client.GetAsync("api/Product");
                if (productsResponse.IsSuccessStatusCode)
                {
                    var allProducts = await productsResponse.Content.ReadFromJsonAsync<List<Product>>();
                    var proposedProductIds = userProposals.Select(p => p.ProductId).ToList();

                    Products = allProducts.Where(p => !proposedProductIds.Contains(p.Id)).ToList();

                    if (!Products.Any())
                    {
                        InfoMessage = "Napravili ste prijedloge za sve proizvode. Bravo :)";
                    }
                }
                else
                {
                    ErrorMessage = "Greska pri dohvacanju proizvoda.";
                }
            }
            else
            {
                ErrorMessage = "Greska pri dohvacanju prijedloga korisnika.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Doslo je do greske: {ex.Message}";
        }
    }

    private async Task HandleCreateProposal()
    {
        if (_userId == null)
        {
            ErrorMessage = "Korisnik nije pronađen.";
            return;
        }

        NewProposal.UserId = _userId.Value;
        NewProposal.User = _user;
        NewProposal.Status = Enums.ProposalStatus.CONSIDERATION;
        NewProposal.Product = Products.FirstOrDefault(p => p.Id == NewProposal.ProductId);

        Console.WriteLine($"NewProposal: {System.Text.Json.JsonSerializer.Serialize(NewProposal)}");

        if (NewProposal.Product == null)
        {
            ErrorMessage = "Proizvod nije odabran.";
            return;
        }
        if (string.IsNullOrEmpty(NewProposal.ProposalText))
        {
            ErrorMessage = "Prijedlog nije zapisan.";
            return;
        }

        try
        {
            var response = await _client.PostAsJsonAsync("api/Proposal", NewProposal);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/proposals");
            }
            else
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Dogodila se greška prilikom dodavanja prijedloga. Odgovor: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Dogodila se greska: {ex.Message}";
        }
    }
}
